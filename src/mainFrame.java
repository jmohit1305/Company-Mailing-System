/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.CardLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author jmohi
 */
public class mainFrame extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form compose
     */
    CardLayout cardLayout;

    @SuppressWarnings("CallToThreadStartDuringObjectConstruction")
    public mainFrame() {

        initComponents();
        cardLayout = (CardLayout) (cardsLay.getLayout());
        cardLayout.show(cardsLay, "cardInbox");
        int i = 0;
        if(i < 1){
            inbox.setEnabled(true);
            i++;
        }else{
            inbox.setEnabled(false);
            JOptionPane.showMessageDialog(this, "you can't press again");
        }
        
        dbQuery.inboxDisplay(inboxTable);
        Thread t = new Thread(this);
        t.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        compose = new javax.swing.JButton();
        inbox = new javax.swing.JButton();
        sent = new javax.swing.JButton();
        trash = new javax.swing.JButton();
        toComposeTime = new javax.swing.JLabel();
        cardsLay = new javax.swing.JPanel();
        cardInbox = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inboxTable = new javax.swing.JTable();
        cardCompose = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        toCompose = new javax.swing.JPanel();
        toComposeReceiver = new javax.swing.JButton();
        toComposeRec = new javax.swing.JTextField();
        toComposeSubject = new javax.swing.JButton();
        toComposeSub = new javax.swing.JTextField();
        msgCompose = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        toComposeMSG = new javax.swing.JTextArea();
        composeInsert = new javax.swing.JButton();
        composeSend = new javax.swing.JButton();
        cardTrash = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        trashTable = new javax.swing.JTable();
        cardSent = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sentTable = new javax.swing.JTable();
        cardMailDisp = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        fromMailDisp = new javax.swing.JPanel();
        toMailReceiver = new javax.swing.JButton();
        toMailRec = new javax.swing.JTextField();
        toMailSubject = new javax.swing.JButton();
        toMailSub = new javax.swing.JTextField();
        toMailTime = new javax.swing.JLabel();
        msgMailDisp = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        MailMsgDisp = new javax.swing.JTextArea();
        butAttach = new javax.swing.JPanel();
        mailAttachDisp = new javax.swing.JButton();
        inboxBackBtn = new javax.swing.JButton();
        inboxRefreshBtn = new javax.swing.JButton();
        inboxDeleteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mail");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(1280, 720));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );

        jSplitPane1.setDividerSize(4);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1280, 624));

        jPanel2.setMaximumSize(new java.awt.Dimension(240, 32767));
        jPanel2.setMinimumSize(new java.awt.Dimension(240, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(240, 658));

        compose.setText("Compose");
        compose.setFocusable(false);
        compose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeActionPerformed(evt);
            }
        });

        inbox.setText("Inbox");
        inbox.setFocusable(false);
        inbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxActionPerformed(evt);
            }
        });

        sent.setText("Sent");
        sent.setFocusable(false);
        sent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sentActionPerformed(evt);
            }
        });

        trash.setText("Trash");
        trash.setFocusable(false);
        trash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trashActionPerformed(evt);
            }
        });

        toComposeTime.setBackground(new java.awt.Color(255, 255, 255));
        toComposeTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        toComposeTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toComposeTime.setText("TIME");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(toComposeTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(compose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trash, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(toComposeTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(compose, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(inbox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(sent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(trash, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        jSplitPane1.setLeftComponent(jPanel2);

        cardsLay.setMaximumSize(new java.awt.Dimension(1213, 2147483647));
        cardsLay.setMinimumSize(new java.awt.Dimension(1213, 0));
        cardsLay.setPreferredSize(new java.awt.Dimension(1213, 658));
        cardsLay.setLayout(new java.awt.CardLayout());

        inboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "From", "Subject", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inboxTable.setFocusable(false);
        inboxTable.getTableHeader().setReorderingAllowed(false);
        inboxTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inboxTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(inboxTable);
        if (inboxTable.getColumnModel().getColumnCount() > 0) {
            inboxTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            inboxTable.getColumnModel().getColumn(0).setMaxWidth(100);
            inboxTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            inboxTable.getColumnModel().getColumn(1).setMaxWidth(200);
            inboxTable.getColumnModel().getColumn(2).setResizable(false);
            inboxTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout cardInboxLayout = new javax.swing.GroupLayout(cardInbox);
        cardInbox.setLayout(cardInboxLayout);
        cardInboxLayout.setHorizontalGroup(
            cardInboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardInboxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
                .addContainerGap())
        );
        cardInboxLayout.setVerticalGroup(
            cardInboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardInboxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardsLay.add(cardInbox, "cardInbox");
        cardInbox.getAccessibleContext().setAccessibleDescription("");

        jSplitPane2.setDividerSize(0);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        toCompose.setPreferredSize(new java.awt.Dimension(1096, 105));

        toComposeReceiver.setText("TO");
        toComposeReceiver.setFocusable(false);
        toComposeReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toComposeReceiverActionPerformed(evt);
            }
        });

        toComposeSubject.setText("Subject");
        toComposeSubject.setFocusable(false);
        toComposeSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toComposeSubjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toComposeLayout = new javax.swing.GroupLayout(toCompose);
        toCompose.setLayout(toComposeLayout);
        toComposeLayout.setHorizontalGroup(
            toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toComposeLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toComposeSubject, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(toComposeReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addGroup(toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toComposeRec, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(toComposeSub))
                .addGap(399, 399, 399))
        );
        toComposeLayout.setVerticalGroup(
            toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toComposeLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toComposeReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(toComposeRec))
                .addGap(40, 40, 40)
                .addGroup(toComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toComposeSub, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toComposeSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSplitPane2.setTopComponent(toCompose);

        toComposeMSG.setColumns(20);
        toComposeMSG.setRows(5);
        jScrollPane1.setViewportView(toComposeMSG);

        composeInsert.setText("Insert");
        composeInsert.setFocusable(false);
        composeInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeInsertActionPerformed(evt);
            }
        });

        composeSend.setText("Send");
        composeSend.setFocusable(false);
        composeSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout msgComposeLayout = new javax.swing.GroupLayout(msgCompose);
        msgCompose.setLayout(msgComposeLayout);
        msgComposeLayout.setHorizontalGroup(
            msgComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgComposeLayout.createSequentialGroup()
                .addGroup(msgComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(msgComposeLayout.createSequentialGroup()
                        .addGap(716, 716, 716)
                        .addComponent(composeInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(composeSend, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(msgComposeLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45))
        );
        msgComposeLayout.setVerticalGroup(
            msgComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, msgComposeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(msgComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(composeInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(composeSend, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane2.setRightComponent(msgCompose);

        javax.swing.GroupLayout cardComposeLayout = new javax.swing.GroupLayout(cardCompose);
        cardCompose.setLayout(cardComposeLayout);
        cardComposeLayout.setHorizontalGroup(
            cardComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardComposeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        cardComposeLayout.setVerticalGroup(
            cardComposeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardComposeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cardsLay.add(cardCompose, "cardCompose");
        cardCompose.getAccessibleContext().setAccessibleDescription("");

        trashTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "From", "Subject", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        trashTable.setFocusable(false);
        trashTable.getTableHeader().setReorderingAllowed(false);
        trashTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trashTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(trashTable);
        if (trashTable.getColumnModel().getColumnCount() > 0) {
            trashTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            trashTable.getColumnModel().getColumn(0).setMaxWidth(100);
            trashTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            trashTable.getColumnModel().getColumn(1).setMaxWidth(200);
            trashTable.getColumnModel().getColumn(2).setResizable(false);
            trashTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout cardTrashLayout = new javax.swing.GroupLayout(cardTrash);
        cardTrash.setLayout(cardTrashLayout);
        cardTrashLayout.setHorizontalGroup(
            cardTrashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardTrashLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1111, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        cardTrashLayout.setVerticalGroup(
            cardTrashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardTrashLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        cardsLay.add(cardTrash, "cardTrash");
        cardTrash.getAccessibleContext().setAccessibleDescription("");

        sentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "To", "Subject", "Message", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sentTable.setFocusable(false);
        sentTable.getTableHeader().setReorderingAllowed(false);
        sentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sentTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(sentTable);
        if (sentTable.getColumnModel().getColumnCount() > 0) {
            sentTable.getColumnModel().getColumn(0).setMinWidth(50);
            sentTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            sentTable.getColumnModel().getColumn(0).setMaxWidth(70);
            sentTable.getColumnModel().getColumn(1).setMinWidth(200);
            sentTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            sentTable.getColumnModel().getColumn(2).setMinWidth(400);
        }

        javax.swing.GroupLayout cardSentLayout = new javax.swing.GroupLayout(cardSent);
        cardSent.setLayout(cardSentLayout);
        cardSentLayout.setHorizontalGroup(
            cardSentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardSentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
                .addContainerGap())
        );
        cardSentLayout.setVerticalGroup(
            cardSentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardSentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardsLay.add(cardSent, "cardSent");
        cardSent.getAccessibleContext().setAccessibleDescription("");

        jSplitPane3.setDividerSize(2);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        fromMailDisp.setPreferredSize(new java.awt.Dimension(1096, 105));

        toMailReceiver.setText("From");
        toMailReceiver.setFocusable(false);
        toMailReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMailReceiverActionPerformed(evt);
            }
        });

        toMailRec.setEditable(false);
        toMailRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMailRecActionPerformed(evt);
            }
        });

        toMailSubject.setText("Subject");
        toMailSubject.setFocusable(false);
        toMailSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toMailSubjectActionPerformed(evt);
            }
        });

        toMailSub.setEditable(false);

        javax.swing.GroupLayout fromMailDispLayout = new javax.swing.GroupLayout(fromMailDisp);
        fromMailDisp.setLayout(fromMailDispLayout);
        fromMailDispLayout.setHorizontalGroup(
            fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fromMailDispLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toMailReceiver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toMailSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(83, 83, 83)
                .addGroup(fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toMailRec, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .addComponent(toMailSub))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(toMailTime, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        fromMailDispLayout.setVerticalGroup(
            fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fromMailDispLayout.createSequentialGroup()
                .addGroup(fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fromMailDispLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toMailReceiver)
                            .addComponent(toMailRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fromMailDispLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(toMailTime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGroup(fromMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toMailSubject)
                    .addComponent(toMailSub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane3.setTopComponent(fromMailDisp);

        MailMsgDisp.setEditable(false);
        MailMsgDisp.setColumns(20);
        MailMsgDisp.setRows(5);
        jScrollPane6.setViewportView(MailMsgDisp);

        mailAttachDisp.setText("Attachments");
        mailAttachDisp.setFocusable(false);
        mailAttachDisp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailAttachDispActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout butAttachLayout = new javax.swing.GroupLayout(butAttach);
        butAttach.setLayout(butAttachLayout);
        butAttachLayout.setHorizontalGroup(
            butAttachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(butAttachLayout.createSequentialGroup()
                .addGap(478, 478, 478)
                .addComponent(mailAttachDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(478, 478, 478))
        );
        butAttachLayout.setVerticalGroup(
            butAttachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(butAttachLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mailAttachDisp)
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout msgMailDispLayout = new javax.swing.GroupLayout(msgMailDisp);
        msgMailDisp.setLayout(msgMailDispLayout);
        msgMailDispLayout.setHorizontalGroup(
            msgMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgMailDispLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(msgMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(butAttach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        msgMailDispLayout.setVerticalGroup(
            msgMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msgMailDispLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butAttach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane3.setRightComponent(msgMailDisp);

        inboxBackBtn.setText("<---");
        inboxBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxBackBtnActionPerformed(evt);
            }
        });

        inboxRefreshBtn.setText("Refresh");
        inboxRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxRefreshBtnActionPerformed(evt);
            }
        });

        inboxDeleteBtn.setText("Delete");
        inboxDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxDeleteBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Time to be fethhed from database");

        javax.swing.GroupLayout cardMailDispLayout = new javax.swing.GroupLayout(cardMailDisp);
        cardMailDisp.setLayout(cardMailDispLayout);
        cardMailDispLayout.setHorizontalGroup(
            cardMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardMailDispLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(cardMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cardMailDispLayout.createSequentialGroup()
                        .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(cardMailDispLayout.createSequentialGroup()
                        .addComponent(inboxBackBtn)
                        .addGap(58, 58, 58)
                        .addComponent(inboxRefreshBtn)
                        .addGap(61, 61, 61)
                        .addComponent(inboxDeleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113))))
        );
        cardMailDispLayout.setVerticalGroup(
            cardMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cardMailDispLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(cardMailDispLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inboxBackBtn)
                    .addComponent(inboxRefreshBtn)
                    .addComponent(inboxDeleteBtn)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cardsLay.add(cardMailDisp, "cardMailDisp");

        jSplitPane1.setRightComponent(cardsLay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1387, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1387, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void toComposeReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toComposeReceiverActionPerformed

    }//GEN-LAST:event_toComposeReceiverActionPerformed

    private void toComposeSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toComposeSubjectActionPerformed

    }//GEN-LAST:event_toComposeSubjectActionPerformed

    private void composeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeActionPerformed

        cardLayout.show(cardsLay, "cardCompose");
    }//GEN-LAST:event_composeActionPerformed

    private void inboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxActionPerformed

        cardLayout.show(cardsLay, "cardInbox");
        dbQuery.inboxDisplay(inboxTable);

    }//GEN-LAST:event_inboxActionPerformed

    private void sentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sentActionPerformed

        cardLayout.show(cardsLay, "cardSent");
        dbQuery.sentDisplay(sentTable);
    }//GEN-LAST:event_sentActionPerformed

    private void trashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trashActionPerformed

        cardLayout.show(cardsLay, "cardTrash");
        dbQuery.trashDisplay(trashTable);

    }//GEN-LAST:event_trashActionPerformed

    static boolean fileselected = false;
    static File selectedFile = null;
    static FileInputStream inputAttach = null;
    static JFileChooser fileChooser = new JFileChooser();
    static int result = 0;
    private void composeInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeInsertActionPerformed

        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("PDF Documents", "pdf"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("MS Office Documents", "docx", "xlsx", "pptx"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));

        fileChooser.setAcceptAllFileFilterUsed(true);

        result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            fileselected = true;
            selectedFile = fileChooser.getSelectedFile();
            try {
                inputAttach = new FileInputStream(selectedFile);

            } catch (FileNotFoundException ex) {
                ex.getMessage();
            }
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
        }

    }//GEN-LAST:event_composeInsertActionPerformed

    private void composeSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeSendActionPerformed

        if (toComposeRec.getText().trim().isEmpty() || toComposeSub.getText().trim().isEmpty() || toComposeMSG.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "None of the fields can be empty or spaces allowed in UserID..!!!");
            return;
        } else {
            int a = dbQuery.insertQueryMaster(toComposeRec.getText(), toComposeMSG.getText(), toComposeSub.getText());
            int b = dbQuery.insertQueryInbox(toComposeRec.getText(), toComposeMSG.getText(), toComposeSub.getText());
            if (fileselected == true) {
                dbQuery.attachDocInsert();
                fileselected=false;
            }
            else{
                selectedFile = null;
                inputAttach = null;
            }
            if (a == 1 && b == 1) {
                JOptionPane.showMessageDialog(null, "Mail Sent");
            } else if (a == 2 && b == 2) {
                JOptionPane.showMessageDialog(null, "Invalid recepient");
                toComposeRec.grabFocus();
                toComposeRec.setText(" ");
            } else {
                JOptionPane.showMessageDialog(this, "Something Went Wrong (received from swtich case)");
            }
        }
        dbQuery.composeClean();

    }//GEN-LAST:event_composeSendActionPerformed

    static String s_inbox;
    private void inboxTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxTableMouseClicked

        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        s_inbox = source.getModel().getValueAt(row, 0).toString();
        cardLayout.show(cardsLay, "cardMailDisp");
        dbQuery.inboxMailDisplay(s_inbox);
    }//GEN-LAST:event_inboxTableMouseClicked
//    static String s_sent;
    private void sentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sentTableMouseClicked
//        JTable source = (JTable) evt.getSource();
//        int row = source.rowAtPoint(evt.getPoint());
//        s_sent = source.getModel().getValueAt(row, 0).toString();
//        cardLayout.show(cardsLay, "cardMailDisp");
//        dbQuery.inboxMailDisplay(s_sent);
    }//GEN-LAST:event_sentTableMouseClicked

    private void trashTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashTableMouseClicked

    }//GEN-LAST:event_trashTableMouseClicked

    private void mailAttachDispActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailAttachDispActionPerformed
        dbQuery.downloadAttachments();
    }//GEN-LAST:event_mailAttachDispActionPerformed

    private void toMailSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toMailSubjectActionPerformed

    }//GEN-LAST:event_toMailSubjectActionPerformed

    private void toMailRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toMailRecActionPerformed

    }//GEN-LAST:event_toMailRecActionPerformed

    private void toMailReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toMailReceiverActionPerformed

    }//GEN-LAST:event_toMailReceiverActionPerformed

    private void inboxBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxBackBtnActionPerformed
        cardLayout.show(cardsLay, "cardInbox");
    }//GEN-LAST:event_inboxBackBtnActionPerformed

    private void inboxRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxRefreshBtnActionPerformed

        cardLayout.show(cardsLay, "cardInbox");
        dbQuery.inboxDisplay(inboxTable);

    }//GEN-LAST:event_inboxRefreshBtnActionPerformed

    private void inboxDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxDeleteBtnActionPerformed

        dbQuery.insertQueryTrash(s_inbox);
        dbQuery.deleteInboxMail(s_inbox);

    }//GEN-LAST:event_inboxDeleteBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new mainFrame().setVisible(false);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    static javax.swing.JTextArea MailMsgDisp;
    private javax.swing.JPanel butAttach;
    private javax.swing.JPanel cardCompose;
    private javax.swing.JPanel cardInbox;
    private javax.swing.JPanel cardMailDisp;
    private javax.swing.JPanel cardSent;
    private javax.swing.JPanel cardTrash;
    static javax.swing.JPanel cardsLay;
    private javax.swing.JButton compose;
    static javax.swing.JButton composeInsert;
    private javax.swing.JButton composeSend;
    private javax.swing.JPanel fromMailDisp;
    private javax.swing.JButton inbox;
    private javax.swing.JButton inboxBackBtn;
    private javax.swing.JButton inboxDeleteBtn;
    private javax.swing.JButton inboxRefreshBtn;
    javax.swing.JTable inboxTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JButton mailAttachDisp;
    private javax.swing.JPanel msgCompose;
    private javax.swing.JPanel msgMailDisp;
    private javax.swing.JButton sent;
    javax.swing.JTable sentTable;
    private javax.swing.JPanel toCompose;
    static javax.swing.JTextArea toComposeMSG;
    static javax.swing.JTextField toComposeRec;
    private javax.swing.JButton toComposeReceiver;
    static javax.swing.JTextField toComposeSub;
    private javax.swing.JButton toComposeSubject;
    private javax.swing.JLabel toComposeTime;
    static javax.swing.JTextField toMailRec;
    private javax.swing.JButton toMailReceiver;
    static javax.swing.JTextField toMailSub;
    private javax.swing.JButton toMailSubject;
    private javax.swing.JLabel toMailTime;
    private javax.swing.JButton trash;
    javax.swing.JTable trashTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            try {
                //Calendar cal = Calendar.getInstance();

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                Date dateobj = new Date();
                toComposeTime.setText(df.format(dateobj.getTime()));

            } catch (Exception e) {
                e.printStackTrace();
            }

        }

    }
}
